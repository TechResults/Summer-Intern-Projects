//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.34209.
// 
#pragma warning disable 1591

namespace DrawingClient.Service {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="DCServiceSoap", Namespace="TotalPromo")]
    public partial class DCService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetDrumLastHistoryItemOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMiscOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNextDrawingDateTimeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDrawingOperationCompleted;
        
        private System.Threading.SendOrPostCallback MustBePresentOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTimeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAnimationURLOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOnlineHelpOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDrawingStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDrumOperationCompleted;
        
        private System.Threading.SendOrPostCallback RedrawWinnerOperationCompleted;
        
        private System.Threading.SendOrPostCallback CompleteDrawingOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidateUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDrawingClientInUseOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDigitalDisplayVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetDrawingClientInUseOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetWinnerPostedByWinnerIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllActivePromotionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDrawingGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback StartCountdownOperationCompleted;
        
        private System.Threading.SendOrPostCallback PopulateDrumOperationCompleted;
        
        private System.Threading.SendOrPostCallback StartDrawingOperationCompleted;
        
        private System.Threading.SendOrPostCallback OptimizeDrumOperationCompleted;
        
        private System.Threading.SendOrPostCallback StopCountdownOperationCompleted;
        
        private System.Threading.SendOrPostCallback DrawWinnerOperationCompleted;
        
        private System.Threading.SendOrPostCallback DrawAllWinnersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPossibleCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback DisqualifyWinnerOperationCompleted;
        
        private System.Threading.SendOrPostCallback ResetDrawingOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDrumHistoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPromoProxyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDrumProxyOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidateOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public DCService() {
            this.Url = global::DrawingClient.Properties.Settings.Default.DrawingClient_Service_DCService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetDrumLastHistoryItemCompletedEventHandler GetDrumLastHistoryItemCompleted;
        
        /// <remarks/>
        public event GetMiscCompletedEventHandler GetMiscCompleted;
        
        /// <remarks/>
        public event GetNextDrawingDateTimeCompletedEventHandler GetNextDrawingDateTimeCompleted;
        
        /// <remarks/>
        public event GetDrawingCompletedEventHandler GetDrawingCompleted;
        
        /// <remarks/>
        public event MustBePresentCompletedEventHandler MustBePresentCompleted;
        
        /// <remarks/>
        public event GetTimeCompletedEventHandler GetTimeCompleted;
        
        /// <remarks/>
        public event GetAnimationURLCompletedEventHandler GetAnimationURLCompleted;
        
        /// <remarks/>
        public event GetOnlineHelpCompletedEventHandler GetOnlineHelpCompleted;
        
        /// <remarks/>
        public event GetDrawingStatusCompletedEventHandler GetDrawingStatusCompleted;
        
        /// <remarks/>
        public event GetDrumCompletedEventHandler GetDrumCompleted;
        
        /// <remarks/>
        public event RedrawWinnerCompletedEventHandler RedrawWinnerCompleted;
        
        /// <remarks/>
        public event CompleteDrawingCompletedEventHandler CompleteDrawingCompleted;
        
        /// <remarks/>
        public event ValidateUserCompletedEventHandler ValidateUserCompleted;
        
        /// <remarks/>
        public event GetDrawingClientInUseCompletedEventHandler GetDrawingClientInUseCompleted;
        
        /// <remarks/>
        public event GetDigitalDisplayVersionCompletedEventHandler GetDigitalDisplayVersionCompleted;
        
        /// <remarks/>
        public event SetDrawingClientInUseCompletedEventHandler SetDrawingClientInUseCompleted;
        
        /// <remarks/>
        public event SetWinnerPostedByWinnerIdCompletedEventHandler SetWinnerPostedByWinnerIdCompleted;
        
        /// <remarks/>
        public event GetAllActivePromotionsCompletedEventHandler GetAllActivePromotionsCompleted;
        
        /// <remarks/>
        public event GetDrawingGroupCompletedEventHandler GetDrawingGroupCompleted;
        
        /// <remarks/>
        public event StartCountdownCompletedEventHandler StartCountdownCompleted;
        
        /// <remarks/>
        public event PopulateDrumCompletedEventHandler PopulateDrumCompleted;
        
        /// <remarks/>
        public event StartDrawingCompletedEventHandler StartDrawingCompleted;
        
        /// <remarks/>
        public event OptimizeDrumCompletedEventHandler OptimizeDrumCompleted;
        
        /// <remarks/>
        public event StopCountdownCompletedEventHandler StopCountdownCompleted;
        
        /// <remarks/>
        public event DrawWinnerCompletedEventHandler DrawWinnerCompleted;
        
        /// <remarks/>
        public event DrawAllWinnersCompletedEventHandler DrawAllWinnersCompleted;
        
        /// <remarks/>
        public event GetPossibleCountCompletedEventHandler GetPossibleCountCompleted;
        
        /// <remarks/>
        public event DisqualifyWinnerCompletedEventHandler DisqualifyWinnerCompleted;
        
        /// <remarks/>
        public event ResetDrawingCompletedEventHandler ResetDrawingCompleted;
        
        /// <remarks/>
        public event GetDrumHistoryCompletedEventHandler GetDrumHistoryCompleted;
        
        /// <remarks/>
        public event GetPromoProxyCompletedEventHandler GetPromoProxyCompleted;
        
        /// <remarks/>
        public event GetDrumProxyCompletedEventHandler GetDrumProxyCompleted;
        
        /// <remarks/>
        public event ValidateCompletedEventHandler ValidateCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("TotalPromo/GetDrumLastHistoryItem", RequestNamespace="TotalPromo", ResponseNamespace="TotalPromo", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Drum GetDrumLastHistoryItem(int promoId, int bucketId) {
            object[] results = this.Invoke("GetDrumLastHistoryItem", new object[] {
                        promoId,
                        bucketId});
            return ((Drum)(results[0]));
        }
        
        /// <remarks/>
        public void GetDrumLastHistoryItemAsync(int promoId, int bucketId) {
            this.GetDrumLastHistoryItemAsync(promoId, bucketId, null);
        }
        
        /// <remarks/>
        public void GetDrumLastHistoryItemAsync(int promoId, int bucketId, object userState) {
            if ((this.GetDrumLastHistoryItemOperationCompleted == null)) {
                this.GetDrumLastHistoryItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDrumLastHistoryItemOperationCompleted);
            }
            this.InvokeAsync("GetDrumLastHistoryItem", new object[] {
                        promoId,
                        bucketId}, this.GetDrumLastHistoryItemOperationCompleted, userState);
        }
        
        private void OnGetDrumLastHistoryItemOperationCompleted(object arg) {
            if ((this.GetDrumLastHistoryItemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDrumLastHistoryItemCompleted(this, new GetDrumLastHistoryItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("TotalPromo/GetMisc", RequestNamespace="TotalPromo", ResponseNamespace="TotalPromo", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetMisc() {
            object[] results = this.Invoke("GetMisc", new object[0]);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetMiscAsync() {
            this.GetMiscAsync(null);
        }
        
        /// <remarks/>
        public void GetMiscAsync(object userState) {
            if ((this.GetMiscOperationCompleted == null)) {
                this.GetMiscOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMiscOperationCompleted);
            }
            this.InvokeAsync("GetMisc", new object[0], this.GetMiscOperationCompleted, userState);
        }
        
        private void OnGetMiscOperationCompleted(object arg) {
            if ((this.GetMiscCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMiscCompleted(this, new GetMiscCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("TotalPromo/GetNextDrawingDateTime", RequestNamespace="TotalPromo", ResponseNamespace="TotalPromo", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.DateTime GetNextDrawingDateTime(int promotionId, int bucketId, System.DateTime drawingDateTime) {
            object[] results = this.Invoke("GetNextDrawingDateTime", new object[] {
                        promotionId,
                        bucketId,
                        drawingDateTime});
            return ((System.DateTime)(results[0]));
        }
        
        /// <remarks/>
        public void GetNextDrawingDateTimeAsync(int promotionId, int bucketId, System.DateTime drawingDateTime) {
            this.GetNextDrawingDateTimeAsync(promotionId, bucketId, drawingDateTime, null);
        }
        
        /// <remarks/>
        public void GetNextDrawingDateTimeAsync(int promotionId, int bucketId, System.DateTime drawingDateTime, object userState) {
            if ((this.GetNextDrawingDateTimeOperationCompleted == null)) {
                this.GetNextDrawingDateTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNextDrawingDateTimeOperationCompleted);
            }
            this.InvokeAsync("GetNextDrawingDateTime", new object[] {
                        promotionId,
                        bucketId,
                        drawingDateTime}, this.GetNextDrawingDateTimeOperationCompleted, userState);
        }
        
        private void OnGetNextDrawingDateTimeOperationCompleted(object arg) {
            if ((this.GetNextDrawingDateTimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNextDrawingDateTimeCompleted(this, new GetNextDrawingDateTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("TotalPromo/GetDrawing", RequestNamespace="TotalPromo", ResponseNamespace="TotalPromo", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Drawing GetDrawing(int drawingId) {
            object[] results = this.Invoke("GetDrawing", new object[] {
                        drawingId});
            return ((Drawing)(results[0]));
        }
        
        /// <remarks/>
        public void GetDrawingAsync(int drawingId) {
            this.GetDrawingAsync(drawingId, null);
        }
        
        /// <remarks/>
        public void GetDrawingAsync(int drawingId, object userState) {
            if ((this.GetDrawingOperationCompleted == null)) {
                this.GetDrawingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDrawingOperationCompleted);
            }
            this.InvokeAsync("GetDrawing", new object[] {
                        drawingId}, this.GetDrawingOperationCompleted, userState);
        }
        
        private void OnGetDrawingOperationCompleted(object arg) {
            if ((this.GetDrawingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDrawingCompleted(this, new GetDrawingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("TotalPromo/MustBePresent", RequestNamespace="TotalPromo", ResponseNamespace="TotalPromo", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool MustBePresent(int promotionId) {
            object[] results = this.Invoke("MustBePresent", new object[] {
                        promotionId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void MustBePresentAsync(int promotionId) {
            this.MustBePresentAsync(promotionId, null);
        }
        
        /// <remarks/>
        public void MustBePresentAsync(int promotionId, object userState) {
            if ((this.MustBePresentOperationCompleted == null)) {
                this.MustBePresentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMustBePresentOperationCompleted);
            }
            this.InvokeAsync("MustBePresent", new object[] {
                        promotionId}, this.MustBePresentOperationCompleted, userState);
        }
        
        private void OnMustBePresentOperationCompleted(object arg) {
            if ((this.MustBePresentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MustBePresentCompleted(this, new MustBePresentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("TotalPromo/GetTime", RequestNamespace="TotalPromo", ResponseNamespace="TotalPromo", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.DateTime GetTime() {
            object[] results = this.Invoke("GetTime", new object[0]);
            return ((System.DateTime)(results[0]));
        }
        
        /// <remarks/>
        public void GetTimeAsync() {
            this.GetTimeAsync(null);
        }
        
        /// <remarks/>
        public void GetTimeAsync(object userState) {
            if ((this.GetTimeOperationCompleted == null)) {
                this.GetTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTimeOperationCompleted);
            }
            this.InvokeAsync("GetTime", new object[0], this.GetTimeOperationCompleted, userState);
        }
        
        private void OnGetTimeOperationCompleted(object arg) {
            if ((this.GetTimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTimeCompleted(this, new GetTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("TotalPromo/GetAnimationURL", RequestNamespace="TotalPromo", ResponseNamespace="TotalPromo", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAnimationURL() {
            object[] results = this.Invoke("GetAnimationURL", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAnimationURLAsync() {
            this.GetAnimationURLAsync(null);
        }
        
        /// <remarks/>
        public void GetAnimationURLAsync(object userState) {
            if ((this.GetAnimationURLOperationCompleted == null)) {
                this.GetAnimationURLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAnimationURLOperationCompleted);
            }
            this.InvokeAsync("GetAnimationURL", new object[0], this.GetAnimationURLOperationCompleted, userState);
        }
        
        private void OnGetAnimationURLOperationCompleted(object arg) {
            if ((this.GetAnimationURLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAnimationURLCompleted(this, new GetAnimationURLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("TotalPromo/GetOnlineHelp", RequestNamespace="TotalPromo", ResponseNamespace="TotalPromo", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetOnlineHelp() {
            object[] results = this.Invoke("GetOnlineHelp", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetOnlineHelpAsync() {
            this.GetOnlineHelpAsync(null);
        }
        
        /// <remarks/>
        public void GetOnlineHelpAsync(object userState) {
            if ((this.GetOnlineHelpOperationCompleted == null)) {
                this.GetOnlineHelpOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOnlineHelpOperationCompleted);
            }
            this.InvokeAsync("GetOnlineHelp", new object[0], this.GetOnlineHelpOperationCompleted, userState);
        }
        
        private void OnGetOnlineHelpOperationCompleted(object arg) {
            if ((this.GetOnlineHelpCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOnlineHelpCompleted(this, new GetOnlineHelpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("TotalPromo/GetDrawingStatus", RequestNamespace="TotalPromo", ResponseNamespace="TotalPromo", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDrawingStatus() {
            object[] results = this.Invoke("GetDrawingStatus", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDrawingStatusAsync() {
            this.GetDrawingStatusAsync(null);
        }
        
        /// <remarks/>
        public void GetDrawingStatusAsync(object userState) {
            if ((this.GetDrawingStatusOperationCompleted == null)) {
                this.GetDrawingStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDrawingStatusOperationCompleted);
            }
            this.InvokeAsync("GetDrawingStatus", new object[0], this.GetDrawingStatusOperationCompleted, userState);
        }
        
        private void OnGetDrawingStatusOperationCompleted(object arg) {
            if ((this.GetDrawingStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDrawingStatusCompleted(this, new GetDrawingStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("TotalPromo/GetDrum", RequestNamespace="TotalPromo", ResponseNamespace="TotalPromo", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Drum GetDrum(int promoId, int bucketId) {
            object[] results = this.Invoke("GetDrum", new object[] {
                        promoId,
                        bucketId});
            return ((Drum)(results[0]));
        }
        
        /// <remarks/>
        public void GetDrumAsync(int promoId, int bucketId) {
            this.GetDrumAsync(promoId, bucketId, null);
        }
        
        /// <remarks/>
        public void GetDrumAsync(int promoId, int bucketId, object userState) {
            if ((this.GetDrumOperationCompleted == null)) {
                this.GetDrumOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDrumOperationCompleted);
            }
            this.InvokeAsync("GetDrum", new object[] {
                        promoId,
                        bucketId}, this.GetDrumOperationCompleted, userState);
        }
        
        private void OnGetDrumOperationCompleted(object arg) {
            if ((this.GetDrumCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDrumCompleted(this, new GetDrumCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("TotalPromo/RedrawWinner", RequestNamespace="TotalPromo", ResponseNamespace="TotalPromo", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Player RedrawWinner(int promotionId, int bucketId, int drawingId, int userID) {
            object[] results = this.Invoke("RedrawWinner", new object[] {
                        promotionId,
                        bucketId,
                        drawingId,
                        userID});
            return ((Player)(results[0]));
        }
        
        /// <remarks/>
        public void RedrawWinnerAsync(int promotionId, int bucketId, int drawingId, int userID) {
            this.RedrawWinnerAsync(promotionId, bucketId, drawingId, userID, null);
        }
        
        /// <remarks/>
        public void RedrawWinnerAsync(int promotionId, int bucketId, int drawingId, int userID, object userState) {
            if ((this.RedrawWinnerOperationCompleted == null)) {
                this.RedrawWinnerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRedrawWinnerOperationCompleted);
            }
            this.InvokeAsync("RedrawWinner", new object[] {
                        promotionId,
                        bucketId,
                        drawingId,
                        userID}, this.RedrawWinnerOperationCompleted, userState);
        }
        
        private void OnRedrawWinnerOperationCompleted(object arg) {
            if ((this.RedrawWinnerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RedrawWinnerCompleted(this, new RedrawWinnerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("TotalPromo/CompleteDrawing", RequestNamespace="TotalPromo", ResponseNamespace="TotalPromo", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DrawingGroup CompleteDrawing(int promotionId, int bucketId, System.DateTime drawingDateTime, int userId) {
            object[] results = this.Invoke("CompleteDrawing", new object[] {
                        promotionId,
                        bucketId,
                        drawingDateTime,
                        userId});
            return ((DrawingGroup)(results[0]));
        }
        
        /// <remarks/>
        public void CompleteDrawingAsync(int promotionId, int bucketId, System.DateTime drawingDateTime, int userId) {
            this.CompleteDrawingAsync(promotionId, bucketId, drawingDateTime, userId, null);
        }
        
        /// <remarks/>
        public void CompleteDrawingAsync(int promotionId, int bucketId, System.DateTime drawingDateTime, int userId, object userState) {
            if ((this.CompleteDrawingOperationCompleted == null)) {
                this.CompleteDrawingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCompleteDrawingOperationCompleted);
            }
            this.InvokeAsync("CompleteDrawing", new object[] {
                        promotionId,
                        bucketId,
                        drawingDateTime,
                        userId}, this.CompleteDrawingOperationCompleted, userState);
        }
        
        private void OnCompleteDrawingOperationCompleted(object arg) {
            if ((this.CompleteDrawingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CompleteDrawingCompleted(this, new CompleteDrawingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("TotalPromo/ValidateUser", RequestNamespace="TotalPromo", ResponseNamespace="TotalPromo", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public User ValidateUser(string userId, string password) {
            object[] results = this.Invoke("ValidateUser", new object[] {
                        userId,
                        password});
            return ((User)(results[0]));
        }
        
        /// <remarks/>
        public void ValidateUserAsync(string userId, string password) {
            this.ValidateUserAsync(userId, password, null);
        }
        
        /// <remarks/>
        public void ValidateUserAsync(string userId, string password, object userState) {
            if ((this.ValidateUserOperationCompleted == null)) {
                this.ValidateUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateUserOperationCompleted);
            }
            this.InvokeAsync("ValidateUser", new object[] {
                        userId,
                        password}, this.ValidateUserOperationCompleted, userState);
        }
        
        private void OnValidateUserOperationCompleted(object arg) {
            if ((this.ValidateUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateUserCompleted(this, new ValidateUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("TotalPromo/GetDrawingClientInUse", RequestNamespace="TotalPromo", ResponseNamespace="TotalPromo", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DrawingClientStatus GetDrawingClientInUse() {
            object[] results = this.Invoke("GetDrawingClientInUse", new object[0]);
            return ((DrawingClientStatus)(results[0]));
        }
        
        /// <remarks/>
        public void GetDrawingClientInUseAsync() {
            this.GetDrawingClientInUseAsync(null);
        }
        
        /// <remarks/>
        public void GetDrawingClientInUseAsync(object userState) {
            if ((this.GetDrawingClientInUseOperationCompleted == null)) {
                this.GetDrawingClientInUseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDrawingClientInUseOperationCompleted);
            }
            this.InvokeAsync("GetDrawingClientInUse", new object[0], this.GetDrawingClientInUseOperationCompleted, userState);
        }
        
        private void OnGetDrawingClientInUseOperationCompleted(object arg) {
            if ((this.GetDrawingClientInUseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDrawingClientInUseCompleted(this, new GetDrawingClientInUseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("TotalPromo/GetDigitalDisplayVersion", RequestNamespace="TotalPromo", ResponseNamespace="TotalPromo", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDigitalDisplayVersion() {
            object[] results = this.Invoke("GetDigitalDisplayVersion", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDigitalDisplayVersionAsync() {
            this.GetDigitalDisplayVersionAsync(null);
        }
        
        /// <remarks/>
        public void GetDigitalDisplayVersionAsync(object userState) {
            if ((this.GetDigitalDisplayVersionOperationCompleted == null)) {
                this.GetDigitalDisplayVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDigitalDisplayVersionOperationCompleted);
            }
            this.InvokeAsync("GetDigitalDisplayVersion", new object[0], this.GetDigitalDisplayVersionOperationCompleted, userState);
        }
        
        private void OnGetDigitalDisplayVersionOperationCompleted(object arg) {
            if ((this.GetDigitalDisplayVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDigitalDisplayVersionCompleted(this, new GetDigitalDisplayVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("TotalPromo/SetDrawingClientInUse", RequestNamespace="TotalPromo", ResponseNamespace="TotalPromo", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SetDrawingClientInUse(string drawingClientOpen, string drawingClientUser) {
            object[] results = this.Invoke("SetDrawingClientInUse", new object[] {
                        drawingClientOpen,
                        drawingClientUser});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SetDrawingClientInUseAsync(string drawingClientOpen, string drawingClientUser) {
            this.SetDrawingClientInUseAsync(drawingClientOpen, drawingClientUser, null);
        }
        
        /// <remarks/>
        public void SetDrawingClientInUseAsync(string drawingClientOpen, string drawingClientUser, object userState) {
            if ((this.SetDrawingClientInUseOperationCompleted == null)) {
                this.SetDrawingClientInUseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetDrawingClientInUseOperationCompleted);
            }
            this.InvokeAsync("SetDrawingClientInUse", new object[] {
                        drawingClientOpen,
                        drawingClientUser}, this.SetDrawingClientInUseOperationCompleted, userState);
        }
        
        private void OnSetDrawingClientInUseOperationCompleted(object arg) {
            if ((this.SetDrawingClientInUseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetDrawingClientInUseCompleted(this, new SetDrawingClientInUseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("TotalPromo/SetWinnerPostedByWinnerId", RequestNamespace="TotalPromo", ResponseNamespace="TotalPromo", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SetWinnerPostedByWinnerId(int winnerId) {
            object[] results = this.Invoke("SetWinnerPostedByWinnerId", new object[] {
                        winnerId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SetWinnerPostedByWinnerIdAsync(int winnerId) {
            this.SetWinnerPostedByWinnerIdAsync(winnerId, null);
        }
        
        /// <remarks/>
        public void SetWinnerPostedByWinnerIdAsync(int winnerId, object userState) {
            if ((this.SetWinnerPostedByWinnerIdOperationCompleted == null)) {
                this.SetWinnerPostedByWinnerIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetWinnerPostedByWinnerIdOperationCompleted);
            }
            this.InvokeAsync("SetWinnerPostedByWinnerId", new object[] {
                        winnerId}, this.SetWinnerPostedByWinnerIdOperationCompleted, userState);
        }
        
        private void OnSetWinnerPostedByWinnerIdOperationCompleted(object arg) {
            if ((this.SetWinnerPostedByWinnerIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetWinnerPostedByWinnerIdCompleted(this, new SetWinnerPostedByWinnerIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("TotalPromo/GetAllActivePromotions", RequestNamespace="TotalPromo", ResponseNamespace="TotalPromo", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetAllActivePromotions() {
            object[] results = this.Invoke("GetAllActivePromotions", new object[0]);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetAllActivePromotionsAsync() {
            this.GetAllActivePromotionsAsync(null);
        }
        
        /// <remarks/>
        public void GetAllActivePromotionsAsync(object userState) {
            if ((this.GetAllActivePromotionsOperationCompleted == null)) {
                this.GetAllActivePromotionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllActivePromotionsOperationCompleted);
            }
            this.InvokeAsync("GetAllActivePromotions", new object[0], this.GetAllActivePromotionsOperationCompleted, userState);
        }
        
        private void OnGetAllActivePromotionsOperationCompleted(object arg) {
            if ((this.GetAllActivePromotionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllActivePromotionsCompleted(this, new GetAllActivePromotionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("TotalPromo/GetDrawingGroup", RequestNamespace="TotalPromo", ResponseNamespace="TotalPromo", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DrawingGroup GetDrawingGroup(int promoId) {
            object[] results = this.Invoke("GetDrawingGroup", new object[] {
                        promoId});
            return ((DrawingGroup)(results[0]));
        }
        
        /// <remarks/>
        public void GetDrawingGroupAsync(int promoId) {
            this.GetDrawingGroupAsync(promoId, null);
        }
        
        /// <remarks/>
        public void GetDrawingGroupAsync(int promoId, object userState) {
            if ((this.GetDrawingGroupOperationCompleted == null)) {
                this.GetDrawingGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDrawingGroupOperationCompleted);
            }
            this.InvokeAsync("GetDrawingGroup", new object[] {
                        promoId}, this.GetDrawingGroupOperationCompleted, userState);
        }
        
        private void OnGetDrawingGroupOperationCompleted(object arg) {
            if ((this.GetDrawingGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDrawingGroupCompleted(this, new GetDrawingGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("TotalPromo/StartCountdown", RequestNamespace="TotalPromo", ResponseNamespace="TotalPromo", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string StartCountdown(int promotionId) {
            object[] results = this.Invoke("StartCountdown", new object[] {
                        promotionId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void StartCountdownAsync(int promotionId) {
            this.StartCountdownAsync(promotionId, null);
        }
        
        /// <remarks/>
        public void StartCountdownAsync(int promotionId, object userState) {
            if ((this.StartCountdownOperationCompleted == null)) {
                this.StartCountdownOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStartCountdownOperationCompleted);
            }
            this.InvokeAsync("StartCountdown", new object[] {
                        promotionId}, this.StartCountdownOperationCompleted, userState);
        }
        
        private void OnStartCountdownOperationCompleted(object arg) {
            if ((this.StartCountdownCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StartCountdownCompleted(this, new StartCountdownCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("TotalPromo/PopulateDrum", RequestNamespace="TotalPromo", ResponseNamespace="TotalPromo", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PopulateDrum(int promoId, int bucketId, System.DateTime drawingDateTime, System.DateTime currentDate, System.DateTime checkInStart, System.DateTime checkInEnd, int userID) {
            object[] results = this.Invoke("PopulateDrum", new object[] {
                        promoId,
                        bucketId,
                        drawingDateTime,
                        currentDate,
                        checkInStart,
                        checkInEnd,
                        userID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PopulateDrumAsync(int promoId, int bucketId, System.DateTime drawingDateTime, System.DateTime currentDate, System.DateTime checkInStart, System.DateTime checkInEnd, int userID) {
            this.PopulateDrumAsync(promoId, bucketId, drawingDateTime, currentDate, checkInStart, checkInEnd, userID, null);
        }
        
        /// <remarks/>
        public void PopulateDrumAsync(int promoId, int bucketId, System.DateTime drawingDateTime, System.DateTime currentDate, System.DateTime checkInStart, System.DateTime checkInEnd, int userID, object userState) {
            if ((this.PopulateDrumOperationCompleted == null)) {
                this.PopulateDrumOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPopulateDrumOperationCompleted);
            }
            this.InvokeAsync("PopulateDrum", new object[] {
                        promoId,
                        bucketId,
                        drawingDateTime,
                        currentDate,
                        checkInStart,
                        checkInEnd,
                        userID}, this.PopulateDrumOperationCompleted, userState);
        }
        
        private void OnPopulateDrumOperationCompleted(object arg) {
            if ((this.PopulateDrumCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PopulateDrumCompleted(this, new PopulateDrumCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("TotalPromo/StartDrawing", RequestNamespace="TotalPromo", ResponseNamespace="TotalPromo", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string StartDrawing(int promoId, int bucketId) {
            object[] results = this.Invoke("StartDrawing", new object[] {
                        promoId,
                        bucketId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void StartDrawingAsync(int promoId, int bucketId) {
            this.StartDrawingAsync(promoId, bucketId, null);
        }
        
        /// <remarks/>
        public void StartDrawingAsync(int promoId, int bucketId, object userState) {
            if ((this.StartDrawingOperationCompleted == null)) {
                this.StartDrawingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStartDrawingOperationCompleted);
            }
            this.InvokeAsync("StartDrawing", new object[] {
                        promoId,
                        bucketId}, this.StartDrawingOperationCompleted, userState);
        }
        
        private void OnStartDrawingOperationCompleted(object arg) {
            if ((this.StartDrawingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StartDrawingCompleted(this, new StartDrawingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("TotalPromo/OptimizeDrum", RequestNamespace="TotalPromo", ResponseNamespace="TotalPromo", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string OptimizeDrum(int promoId, int bucketId) {
            object[] results = this.Invoke("OptimizeDrum", new object[] {
                        promoId,
                        bucketId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void OptimizeDrumAsync(int promoId, int bucketId) {
            this.OptimizeDrumAsync(promoId, bucketId, null);
        }
        
        /// <remarks/>
        public void OptimizeDrumAsync(int promoId, int bucketId, object userState) {
            if ((this.OptimizeDrumOperationCompleted == null)) {
                this.OptimizeDrumOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOptimizeDrumOperationCompleted);
            }
            this.InvokeAsync("OptimizeDrum", new object[] {
                        promoId,
                        bucketId}, this.OptimizeDrumOperationCompleted, userState);
        }
        
        private void OnOptimizeDrumOperationCompleted(object arg) {
            if ((this.OptimizeDrumCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OptimizeDrumCompleted(this, new OptimizeDrumCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("TotalPromo/StopCountdown", RequestNamespace="TotalPromo", ResponseNamespace="TotalPromo", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string StopCountdown(int promotionID, int bucketID, System.DateTime drawingDate) {
            object[] results = this.Invoke("StopCountdown", new object[] {
                        promotionID,
                        bucketID,
                        drawingDate});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void StopCountdownAsync(int promotionID, int bucketID, System.DateTime drawingDate) {
            this.StopCountdownAsync(promotionID, bucketID, drawingDate, null);
        }
        
        /// <remarks/>
        public void StopCountdownAsync(int promotionID, int bucketID, System.DateTime drawingDate, object userState) {
            if ((this.StopCountdownOperationCompleted == null)) {
                this.StopCountdownOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStopCountdownOperationCompleted);
            }
            this.InvokeAsync("StopCountdown", new object[] {
                        promotionID,
                        bucketID,
                        drawingDate}, this.StopCountdownOperationCompleted, userState);
        }
        
        private void OnStopCountdownOperationCompleted(object arg) {
            if ((this.StopCountdownCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StopCountdownCompleted(this, new StopCountdownCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("TotalPromo/DrawWinner", RequestNamespace="TotalPromo", ResponseNamespace="TotalPromo", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Player DrawWinner(int promotionId, int bucketId, int drawingId, int userID, int drawingClientRowNumber) {
            object[] results = this.Invoke("DrawWinner", new object[] {
                        promotionId,
                        bucketId,
                        drawingId,
                        userID,
                        drawingClientRowNumber});
            return ((Player)(results[0]));
        }
        
        /// <remarks/>
        public void DrawWinnerAsync(int promotionId, int bucketId, int drawingId, int userID, int drawingClientRowNumber) {
            this.DrawWinnerAsync(promotionId, bucketId, drawingId, userID, drawingClientRowNumber, null);
        }
        
        /// <remarks/>
        public void DrawWinnerAsync(int promotionId, int bucketId, int drawingId, int userID, int drawingClientRowNumber, object userState) {
            if ((this.DrawWinnerOperationCompleted == null)) {
                this.DrawWinnerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDrawWinnerOperationCompleted);
            }
            this.InvokeAsync("DrawWinner", new object[] {
                        promotionId,
                        bucketId,
                        drawingId,
                        userID,
                        drawingClientRowNumber}, this.DrawWinnerOperationCompleted, userState);
        }
        
        private void OnDrawWinnerOperationCompleted(object arg) {
            if ((this.DrawWinnerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DrawWinnerCompleted(this, new DrawWinnerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("TotalPromo/DrawAllWinners", RequestNamespace="TotalPromo", ResponseNamespace="TotalPromo", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DrawAllWinners(int promotionId, int bucketId, int userID) {
            this.Invoke("DrawAllWinners", new object[] {
                        promotionId,
                        bucketId,
                        userID});
        }
        
        /// <remarks/>
        public void DrawAllWinnersAsync(int promotionId, int bucketId, int userID) {
            this.DrawAllWinnersAsync(promotionId, bucketId, userID, null);
        }
        
        /// <remarks/>
        public void DrawAllWinnersAsync(int promotionId, int bucketId, int userID, object userState) {
            if ((this.DrawAllWinnersOperationCompleted == null)) {
                this.DrawAllWinnersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDrawAllWinnersOperationCompleted);
            }
            this.InvokeAsync("DrawAllWinners", new object[] {
                        promotionId,
                        bucketId,
                        userID}, this.DrawAllWinnersOperationCompleted, userState);
        }
        
        private void OnDrawAllWinnersOperationCompleted(object arg) {
            if ((this.DrawAllWinnersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DrawAllWinnersCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("TotalPromo/GetPossibleCount", RequestNamespace="TotalPromo", ResponseNamespace="TotalPromo", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPossibleCount(int promoId, int bucketId, System.DateTime drawingDate) {
            object[] results = this.Invoke("GetPossibleCount", new object[] {
                        promoId,
                        bucketId,
                        drawingDate});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPossibleCountAsync(int promoId, int bucketId, System.DateTime drawingDate) {
            this.GetPossibleCountAsync(promoId, bucketId, drawingDate, null);
        }
        
        /// <remarks/>
        public void GetPossibleCountAsync(int promoId, int bucketId, System.DateTime drawingDate, object userState) {
            if ((this.GetPossibleCountOperationCompleted == null)) {
                this.GetPossibleCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPossibleCountOperationCompleted);
            }
            this.InvokeAsync("GetPossibleCount", new object[] {
                        promoId,
                        bucketId,
                        drawingDate}, this.GetPossibleCountOperationCompleted, userState);
        }
        
        private void OnGetPossibleCountOperationCompleted(object arg) {
            if ((this.GetPossibleCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPossibleCountCompleted(this, new GetPossibleCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("TotalPromo/DisqualifyWinner", RequestNamespace="TotalPromo", ResponseNamespace="TotalPromo", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DisqualifyWinner(int promotionId, int bucketId, int drawingId, string playerAccountNum, string cmsPlayerId, int ticketNumber) {
            this.Invoke("DisqualifyWinner", new object[] {
                        promotionId,
                        bucketId,
                        drawingId,
                        playerAccountNum,
                        cmsPlayerId,
                        ticketNumber});
        }
        
        /// <remarks/>
        public void DisqualifyWinnerAsync(int promotionId, int bucketId, int drawingId, string playerAccountNum, string cmsPlayerId, int ticketNumber) {
            this.DisqualifyWinnerAsync(promotionId, bucketId, drawingId, playerAccountNum, cmsPlayerId, ticketNumber, null);
        }
        
        /// <remarks/>
        public void DisqualifyWinnerAsync(int promotionId, int bucketId, int drawingId, string playerAccountNum, string cmsPlayerId, int ticketNumber, object userState) {
            if ((this.DisqualifyWinnerOperationCompleted == null)) {
                this.DisqualifyWinnerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDisqualifyWinnerOperationCompleted);
            }
            this.InvokeAsync("DisqualifyWinner", new object[] {
                        promotionId,
                        bucketId,
                        drawingId,
                        playerAccountNum,
                        cmsPlayerId,
                        ticketNumber}, this.DisqualifyWinnerOperationCompleted, userState);
        }
        
        private void OnDisqualifyWinnerOperationCompleted(object arg) {
            if ((this.DisqualifyWinnerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DisqualifyWinnerCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("TotalPromo/ResetDrawing", RequestNamespace="TotalPromo", ResponseNamespace="TotalPromo", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ResetDrawing(int promoId, int bucketId, System.DateTime drawingDateTime) {
            object[] results = this.Invoke("ResetDrawing", new object[] {
                        promoId,
                        bucketId,
                        drawingDateTime});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ResetDrawingAsync(int promoId, int bucketId, System.DateTime drawingDateTime) {
            this.ResetDrawingAsync(promoId, bucketId, drawingDateTime, null);
        }
        
        /// <remarks/>
        public void ResetDrawingAsync(int promoId, int bucketId, System.DateTime drawingDateTime, object userState) {
            if ((this.ResetDrawingOperationCompleted == null)) {
                this.ResetDrawingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnResetDrawingOperationCompleted);
            }
            this.InvokeAsync("ResetDrawing", new object[] {
                        promoId,
                        bucketId,
                        drawingDateTime}, this.ResetDrawingOperationCompleted, userState);
        }
        
        private void OnResetDrawingOperationCompleted(object arg) {
            if ((this.ResetDrawingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ResetDrawingCompleted(this, new ResetDrawingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("TotalPromo/GetDrumHistory", RequestNamespace="TotalPromo", ResponseNamespace="TotalPromo", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetDrumHistory(int promoId, int bucketId) {
            object[] results = this.Invoke("GetDrumHistory", new object[] {
                        promoId,
                        bucketId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetDrumHistoryAsync(int promoId, int bucketId) {
            this.GetDrumHistoryAsync(promoId, bucketId, null);
        }
        
        /// <remarks/>
        public void GetDrumHistoryAsync(int promoId, int bucketId, object userState) {
            if ((this.GetDrumHistoryOperationCompleted == null)) {
                this.GetDrumHistoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDrumHistoryOperationCompleted);
            }
            this.InvokeAsync("GetDrumHistory", new object[] {
                        promoId,
                        bucketId}, this.GetDrumHistoryOperationCompleted, userState);
        }
        
        private void OnGetDrumHistoryOperationCompleted(object arg) {
            if ((this.GetDrumHistoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDrumHistoryCompleted(this, new GetDrumHistoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("TotalPromo/GetPromoProxy", RequestNamespace="TotalPromo", ResponseNamespace="TotalPromo", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Promo GetPromoProxy() {
            object[] results = this.Invoke("GetPromoProxy", new object[0]);
            return ((Promo)(results[0]));
        }
        
        /// <remarks/>
        public void GetPromoProxyAsync() {
            this.GetPromoProxyAsync(null);
        }
        
        /// <remarks/>
        public void GetPromoProxyAsync(object userState) {
            if ((this.GetPromoProxyOperationCompleted == null)) {
                this.GetPromoProxyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPromoProxyOperationCompleted);
            }
            this.InvokeAsync("GetPromoProxy", new object[0], this.GetPromoProxyOperationCompleted, userState);
        }
        
        private void OnGetPromoProxyOperationCompleted(object arg) {
            if ((this.GetPromoProxyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPromoProxyCompleted(this, new GetPromoProxyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("TotalPromo/GetDrumProxy", RequestNamespace="TotalPromo", ResponseNamespace="TotalPromo", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Drum GetDrumProxy() {
            object[] results = this.Invoke("GetDrumProxy", new object[0]);
            return ((Drum)(results[0]));
        }
        
        /// <remarks/>
        public void GetDrumProxyAsync() {
            this.GetDrumProxyAsync(null);
        }
        
        /// <remarks/>
        public void GetDrumProxyAsync(object userState) {
            if ((this.GetDrumProxyOperationCompleted == null)) {
                this.GetDrumProxyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDrumProxyOperationCompleted);
            }
            this.InvokeAsync("GetDrumProxy", new object[0], this.GetDrumProxyOperationCompleted, userState);
        }
        
        private void OnGetDrumProxyOperationCompleted(object arg) {
            if ((this.GetDrumProxyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDrumProxyCompleted(this, new GetDrumProxyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("TotalPromo/Validate", RequestNamespace="TotalPromo", ResponseNamespace="TotalPromo", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Validate(int promoId, int bucketId, int drawingId, string playerAccountNum, string cmsPlayerId, int ticketNumber, int userId) {
            this.Invoke("Validate", new object[] {
                        promoId,
                        bucketId,
                        drawingId,
                        playerAccountNum,
                        cmsPlayerId,
                        ticketNumber,
                        userId});
        }
        
        /// <remarks/>
        public void ValidateAsync(int promoId, int bucketId, int drawingId, string playerAccountNum, string cmsPlayerId, int ticketNumber, int userId) {
            this.ValidateAsync(promoId, bucketId, drawingId, playerAccountNum, cmsPlayerId, ticketNumber, userId, null);
        }
        
        /// <remarks/>
        public void ValidateAsync(int promoId, int bucketId, int drawingId, string playerAccountNum, string cmsPlayerId, int ticketNumber, int userId, object userState) {
            if ((this.ValidateOperationCompleted == null)) {
                this.ValidateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateOperationCompleted);
            }
            this.InvokeAsync("Validate", new object[] {
                        promoId,
                        bucketId,
                        drawingId,
                        playerAccountNum,
                        cmsPlayerId,
                        ticketNumber,
                        userId}, this.ValidateOperationCompleted, userState);
        }
        
        private void OnValidateOperationCompleted(object arg) {
            if ((this.ValidateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="TotalPromo")]
    public partial class Drum {
        
        private int idField;
        
        private string nameField;
        
        private string typeField;
        
        private int numberOfEntriesField;
        
        private int numberOfPlayersField;
        
        private System.DateTime lastPopulatedField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public int NumberOfEntries {
            get {
                return this.numberOfEntriesField;
            }
            set {
                this.numberOfEntriesField = value;
            }
        }
        
        /// <remarks/>
        public int NumberOfPlayers {
            get {
                return this.numberOfPlayersField;
            }
            set {
                this.numberOfPlayersField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LastPopulated {
            get {
                return this.lastPopulatedField;
            }
            set {
                this.lastPopulatedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="TotalPromo")]
    public partial class DrawingClientStatus {
        
        private bool drawingClientInUseField;
        
        private string drawingClientInUseByField;
        
        /// <remarks/>
        public bool DrawingClientInUse {
            get {
                return this.drawingClientInUseField;
            }
            set {
                this.drawingClientInUseField = value;
            }
        }
        
        /// <remarks/>
        public string DrawingClientInUseBy {
            get {
                return this.drawingClientInUseByField;
            }
            set {
                this.drawingClientInUseByField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="TotalPromo")]
    public partial class User {
        
        private int userIDField;
        
        private string userIDTextField;
        
        private string loginStatusField;
        
        private int userLevelField;
        
        /// <remarks/>
        public int UserID {
            get {
                return this.userIDField;
            }
            set {
                this.userIDField = value;
            }
        }
        
        /// <remarks/>
        public string UserIDText {
            get {
                return this.userIDTextField;
            }
            set {
                this.userIDTextField = value;
            }
        }
        
        /// <remarks/>
        public string LoginStatus {
            get {
                return this.loginStatusField;
            }
            set {
                this.loginStatusField = value;
            }
        }
        
        /// <remarks/>
        public int UserLevel {
            get {
                return this.userLevelField;
            }
            set {
                this.userLevelField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="TotalPromo")]
    public partial class Promo {
        
        private int idField;
        
        private string nameField;
        
        private System.DateTime startDateField;
        
        private System.DateTime endDateField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime StartDate {
            get {
                return this.startDateField;
            }
            set {
                this.startDateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime EndDate {
            get {
                return this.endDateField;
            }
            set {
                this.endDateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="TotalPromo")]
    public partial class DrawingGroup {
        
        private int promoIdField;
        
        private int bucketIdField;
        
        private System.DateTime drawDateField;
        
        private System.DateTime nextDrawDateField;
        
        private Promo promoField;
        
        private Drum drumField;
        
        private Drawing[] drawingsField;
        
        private System.DateTime checkinStartTimeField;
        
        private System.DateTime checkinEndTimeField;
        
        /// <remarks/>
        public int PromoId {
            get {
                return this.promoIdField;
            }
            set {
                this.promoIdField = value;
            }
        }
        
        /// <remarks/>
        public int BucketId {
            get {
                return this.bucketIdField;
            }
            set {
                this.bucketIdField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime DrawDate {
            get {
                return this.drawDateField;
            }
            set {
                this.drawDateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime NextDrawDate {
            get {
                return this.nextDrawDateField;
            }
            set {
                this.nextDrawDateField = value;
            }
        }
        
        /// <remarks/>
        public Promo Promo {
            get {
                return this.promoField;
            }
            set {
                this.promoField = value;
            }
        }
        
        /// <remarks/>
        public Drum Drum {
            get {
                return this.drumField;
            }
            set {
                this.drumField = value;
            }
        }
        
        /// <remarks/>
        public Drawing[] Drawings {
            get {
                return this.drawingsField;
            }
            set {
                this.drawingsField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime CheckinStartTime {
            get {
                return this.checkinStartTimeField;
            }
            set {
                this.checkinStartTimeField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime CheckinEndTime {
            get {
                return this.checkinEndTimeField;
            }
            set {
                this.checkinEndTimeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="TotalPromo")]
    public partial class Drawing {
        
        private int ticketNumberField;
        
        private int idField;
        
        private int promoIdField;
        
        private int bucketIdField;
        
        private int prizeIdField;
        
        private string prizeField;
        
        private decimal prizeValueField;
        
        private int winnerIdField;
        
        private string winnerField;
        
        private System.DateTime winnerDobField;
        
        private System.DateTime timeOutField;
        
        private string statusField;
        
        private string cMSPlayerIDField;
        
        private string playerAccountNumField;
        
        private bool validatedField;
        
        private System.DateTime timeStartedField;
        
        private string afterCountdownField;
        
        /// <remarks/>
        public int TicketNumber {
            get {
                return this.ticketNumberField;
            }
            set {
                this.ticketNumberField = value;
            }
        }
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public int PromoId {
            get {
                return this.promoIdField;
            }
            set {
                this.promoIdField = value;
            }
        }
        
        /// <remarks/>
        public int BucketId {
            get {
                return this.bucketIdField;
            }
            set {
                this.bucketIdField = value;
            }
        }
        
        /// <remarks/>
        public int PrizeId {
            get {
                return this.prizeIdField;
            }
            set {
                this.prizeIdField = value;
            }
        }
        
        /// <remarks/>
        public string Prize {
            get {
                return this.prizeField;
            }
            set {
                this.prizeField = value;
            }
        }
        
        /// <remarks/>
        public decimal PrizeValue {
            get {
                return this.prizeValueField;
            }
            set {
                this.prizeValueField = value;
            }
        }
        
        /// <remarks/>
        public int WinnerId {
            get {
                return this.winnerIdField;
            }
            set {
                this.winnerIdField = value;
            }
        }
        
        /// <remarks/>
        public string Winner {
            get {
                return this.winnerField;
            }
            set {
                this.winnerField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime WinnerDob {
            get {
                return this.winnerDobField;
            }
            set {
                this.winnerDobField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime TimeOut {
            get {
                return this.timeOutField;
            }
            set {
                this.timeOutField = value;
            }
        }
        
        /// <remarks/>
        public string Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public string CMSPlayerID {
            get {
                return this.cMSPlayerIDField;
            }
            set {
                this.cMSPlayerIDField = value;
            }
        }
        
        /// <remarks/>
        public string PlayerAccountNum {
            get {
                return this.playerAccountNumField;
            }
            set {
                this.playerAccountNumField = value;
            }
        }
        
        /// <remarks/>
        public bool Validated {
            get {
                return this.validatedField;
            }
            set {
                this.validatedField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime TimeStarted {
            get {
                return this.timeStartedField;
            }
            set {
                this.timeStartedField = value;
            }
        }
        
        /// <remarks/>
        public string AfterCountdown {
            get {
                return this.afterCountdownField;
            }
            set {
                this.afterCountdownField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="TotalPromo")]
    public partial class Player {
        
        private int winnerIdField;
        
        private string playerAccountNumField;
        
        private string cMSPlayerIDField;
        
        private string playerNameField;
        
        private System.DateTime playerDOBField;
        
        private int entryIdField;
        
        /// <remarks/>
        public int WinnerId {
            get {
                return this.winnerIdField;
            }
            set {
                this.winnerIdField = value;
            }
        }
        
        /// <remarks/>
        public string PlayerAccountNum {
            get {
                return this.playerAccountNumField;
            }
            set {
                this.playerAccountNumField = value;
            }
        }
        
        /// <remarks/>
        public string CMSPlayerID {
            get {
                return this.cMSPlayerIDField;
            }
            set {
                this.cMSPlayerIDField = value;
            }
        }
        
        /// <remarks/>
        public string PlayerName {
            get {
                return this.playerNameField;
            }
            set {
                this.playerNameField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime PlayerDOB {
            get {
                return this.playerDOBField;
            }
            set {
                this.playerDOBField = value;
            }
        }
        
        /// <remarks/>
        public int EntryId {
            get {
                return this.entryIdField;
            }
            set {
                this.entryIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetDrumLastHistoryItemCompletedEventHandler(object sender, GetDrumLastHistoryItemCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDrumLastHistoryItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDrumLastHistoryItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Drum Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Drum)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetMiscCompletedEventHandler(object sender, GetMiscCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMiscCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMiscCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetNextDrawingDateTimeCompletedEventHandler(object sender, GetNextDrawingDateTimeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNextDrawingDateTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNextDrawingDateTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.DateTime Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetDrawingCompletedEventHandler(object sender, GetDrawingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDrawingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDrawingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Drawing Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Drawing)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void MustBePresentCompletedEventHandler(object sender, MustBePresentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MustBePresentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MustBePresentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetTimeCompletedEventHandler(object sender, GetTimeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.DateTime Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetAnimationURLCompletedEventHandler(object sender, GetAnimationURLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAnimationURLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAnimationURLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetOnlineHelpCompletedEventHandler(object sender, GetOnlineHelpCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOnlineHelpCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOnlineHelpCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetDrawingStatusCompletedEventHandler(object sender, GetDrawingStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDrawingStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDrawingStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetDrumCompletedEventHandler(object sender, GetDrumCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDrumCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDrumCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Drum Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Drum)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void RedrawWinnerCompletedEventHandler(object sender, RedrawWinnerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RedrawWinnerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RedrawWinnerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Player Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Player)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void CompleteDrawingCompletedEventHandler(object sender, CompleteDrawingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CompleteDrawingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CompleteDrawingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DrawingGroup Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DrawingGroup)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void ValidateUserCompletedEventHandler(object sender, ValidateUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidateUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public User Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((User)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetDrawingClientInUseCompletedEventHandler(object sender, GetDrawingClientInUseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDrawingClientInUseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDrawingClientInUseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DrawingClientStatus Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DrawingClientStatus)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetDigitalDisplayVersionCompletedEventHandler(object sender, GetDigitalDisplayVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDigitalDisplayVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDigitalDisplayVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void SetDrawingClientInUseCompletedEventHandler(object sender, SetDrawingClientInUseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetDrawingClientInUseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetDrawingClientInUseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void SetWinnerPostedByWinnerIdCompletedEventHandler(object sender, SetWinnerPostedByWinnerIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetWinnerPostedByWinnerIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetWinnerPostedByWinnerIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetAllActivePromotionsCompletedEventHandler(object sender, GetAllActivePromotionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllActivePromotionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllActivePromotionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetDrawingGroupCompletedEventHandler(object sender, GetDrawingGroupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDrawingGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDrawingGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DrawingGroup Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DrawingGroup)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void StartCountdownCompletedEventHandler(object sender, StartCountdownCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StartCountdownCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StartCountdownCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void PopulateDrumCompletedEventHandler(object sender, PopulateDrumCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PopulateDrumCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PopulateDrumCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void StartDrawingCompletedEventHandler(object sender, StartDrawingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StartDrawingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StartDrawingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void OptimizeDrumCompletedEventHandler(object sender, OptimizeDrumCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OptimizeDrumCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal OptimizeDrumCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void StopCountdownCompletedEventHandler(object sender, StopCountdownCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StopCountdownCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StopCountdownCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void DrawWinnerCompletedEventHandler(object sender, DrawWinnerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DrawWinnerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DrawWinnerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Player Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Player)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void DrawAllWinnersCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetPossibleCountCompletedEventHandler(object sender, GetPossibleCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPossibleCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPossibleCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void DisqualifyWinnerCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void ResetDrawingCompletedEventHandler(object sender, ResetDrawingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ResetDrawingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ResetDrawingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetDrumHistoryCompletedEventHandler(object sender, GetDrumHistoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDrumHistoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDrumHistoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetPromoProxyCompletedEventHandler(object sender, GetPromoProxyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPromoProxyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPromoProxyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Promo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Promo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetDrumProxyCompletedEventHandler(object sender, GetDrumProxyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDrumProxyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDrumProxyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Drum Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Drum)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void ValidateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591